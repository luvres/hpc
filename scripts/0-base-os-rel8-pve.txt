########################## # 
# Rocky Linux (headnode) # # 40.6.18.64/27 | 65-94 BC: 95
########################## # 40.6.18.64/28 | 65-78 BC: 79
VMID=22027;HOSTNAME="warewulf";STORAGE="local-lvm";DISK="56";
BRIDGE0="vmbr0";BRIDGE1="vmbr1";IP0="172.3.255.27/28";IP1="40.6.18.90/27";GW0="172.3.255.30";
# -----------
qm create ${VMID} \
-name ${HOSTNAME} -ostype l26 \
-sockets 1 -cores 4 -vcpus 4 -cpu cputype=kvm64 -kvm 1 -numa 1 \
-memory 8192 -vga qxl -onboot 1 \
-net0 virtio,bridge=${BRIDGE0} \
-net1 virtio,bridge=${BRIDGE1}

# Import the OpenStack disk image to Proxmox storage
#qm importdisk ${VMID} Rocky-8-GenericCloud-8.5-20211114.2.x86_64.qcow2 ${STORAGE}
qm importdisk ${VMID} Rocky-8-GenericCloud-8.6.20220702.0.x86_64.qcow2 ${STORAGE}
#qm importdisk ${VMID} Rocky-9-GenericCloud-9.0-20220706.0.x86_64.qcow2 ${STORAGE}

qm set ${VMID} \
-scsihw virtio-scsi-pci -virtio0 ${STORAGE}:vm-${VMID}-disk-0 \
-ide2 ${STORAGE}:cloudinit -serial0 socket \
-boot c -bootdisk virtio0 -agent 1 \
-hotplug disk,network,usb,memory,cpu \
-ipconfig0 ip=${IP0},gw=${GW0} \
-ipconfig1 ip=${IP1} \
-sshkey ~/hpc.pub
qm resize ${VMID} virtio0 +${DISK}G
qm start ${VMID}

# Remove
VMID=22027;qm stop ${VMID};qm destroy ${VMID};
# -----------

# Access VM
ssh -i ~/hpc-key.pem -o StrictHostKeyChecking=no -o BatchMode=yes rocky@172.3.255.27


###############
# Congif Base #
###############
# Hostname
sudo hostnamectl set-hostname $(hostname -I | awk '{print $1}' | sed 's/\./-/g' | sed 's/^/ip-/')
# Timezone
sudo timedatectl set-timezone America/Sao_Paulo

# Docker
sudo dnf config-manager --add-repo=https://download.docker.com/linux/centos/docker-ce.repo
sudo dnf install -y docker-ce 
sudo systemctl enable --now docker
sudo usermod -aG docker $USER

# Apptainer
APPTAINER_MAJOR="v1.0.3";APPTAINER_VERSION="1.0.3-1"
sudo dnf -y install kernel-modules https://github.com/apptainer/apptainer/releases/download/${APPTAINER_MAJOR}/apptainer-${APPTAINER_VERSION}.x86_64.rpm

# -----------
tee ~/.ssh/id_rsa <<EoF
-----BEGIN OPENSSH PRIVATE KEY-----
b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAAAMwAAAAtzc2gtZW
QyNTUxOQAAACBrRPv8UAWLBXgnxMeHDLsvqdPBC3tyQzJOZNwzD37HLAAAAJBII60aSCOt
GgAAAAtzc2gtZWQyNTUxOQAAACBrRPv8UAWLBXgnxMeHDLsvqdPBC3tyQzJOZNwzD37HLA
AAAECqzSlvVDE1JzaBKfpNqRs1nL88lRuJOBf2c5pWQW9QlmtE+/xQBYsFeCfEx4cMuy+p
08ELe3JDMk5k3DMPfscsAAAAC0NsdXN0ZXIgSFBDAQI=
-----END OPENSSH PRIVATE KEY-----
EoF
# -----------
chmod 0400 ~/.ssh/id_rsa
# ssh
sudo sed -i '/StrictHostKeyChecking/s/#   //' /etc/ssh/ssh_config
sudo sed -i '/StrictHostKeyChecking/s/ask/no/' /etc/ssh/ssh_config
sudo sed -i '/BatchMode/s/#   //' /etc/ssh/ssh_config
sudo sed -i '/BatchMode/s/no/yes/' /etc/ssh/ssh_config

sudo init 6

# Utils
#sudo dnf install -y nano pciutils net-tools colordiff htop


##############################
# Rocky Linux (controlnodes) #
##############################
### GPU (cn81) ###
VMID=18081;BIOS="ovmf";HOSTNAME="cn81";BRIDGE="vmbr1";IP="dhcp";MACADDR="fa:ce:40:06:18:81";PCIe="04:00.0"
# -----------
qm create ${VMID} \
-name ${HOSTNAME} -ostype l26 -bios ${BIOS} \
-sockets 1 -cores 4 -vcpus 4 -memory 16384 -vga qxl -onboot 1 \
-net0 virtio,bridge=${BRIDGE},macaddr=${MACADDR} \
-ipconfig0 ip=${IP} \
-hostpci0 ${PCIe} \
-sshkey ~/hpc.pub; qm start ${VMID}
### Remove
VMID=18081;qm stop ${VMID};qm destroy ${VMID};
# ---------------------------------
### GPU (cn82) ###
VMID=18082;BIOS="ovmf";HOSTNAME="cn82";BRIDGE="vmbr1";IP="dhcp";MACADDR="fa:ce:40:06:18:82";PCIe="04:00.0"
# -----------
qm create ${VMID} \
-name ${HOSTNAME} -ostype l26 -bios ${BIOS} \
-sockets 1 -cores 4 -vcpus 4 -memory 16384 -vga qxl -onboot 1 \
-net0 virtio,bridge=${BRIDGE},macaddr=${MACADDR} \
-ipconfig0 ip=${IP} \
-hostpci0 ${PCIe} \
-sshkey ~/hpc.pub; qm start ${VMID}
### Remove
VMID=18082;qm stop ${VMID};qm destroy ${VMID};



## CPU ###
VMID=18081;BIOS="seabios";HOSTNAME="cn81";BRIDGE="vmbr1";IP="dhcp";MACADDR="fa:ce:40:06:18:81"
# -----------
qm create ${VMID} \
-name ${HOSTNAME} -ostype l26 -bios ${BIOS} \
-sockets 1 -cores 4 -vcpus 4 -memory 16384 -vga qxl -onboot 1 \
-net0 virtio,bridge=${BRIDGE},macaddr=${MACADDR} \
-ipconfig0 ip=${IP} \
-sshkey ~/hpc.pub; qm start ${VMID}

# Remove
VMID=18081;qm stop ${VMID};qm destroy ${VMID};




##############
# Test Slurm #
##############
sinfo
sinfo -lNe
srun -N1 hostname
srun -N1 sleep 10 &
squeue

# CPU
srun --mpi=pmi2 --nodes=1 --ntasks-per-node=4 ./mpich-hello-world.sif; watch squeue

# GPU
srun --gres=gpu:gtx1050:1 --mem=4G --cpus-per-gpu=1 --nodes=1 nvidia-smi ; watch squeue

# ----------------------
# ----------------------
# 1) Configure
/etc/slurm/gres.conf; /etc/slurm/slurm.conf
# 2) Rebuild Overlays
sudo wwctl overlay build
# 3) Restart services
sudo systemctl restart slurmctld
sudo systemctl status slurmctld
tail -f /var/log/slurmd.log
slurmd -Dcvvv
# -----------
systemctl restart slurmd
systemctl status slurmd
# 4) reconfigure
sudo scontrol reconfigure


###################################
# Rocky Linux (OOD Open OnDemand) #
###################################
VMID=18065;BIOS="ovmf";HOSTNAME="ood";BRIDGE0="vmbr1";IP0="dhcp";MACADDR="fa:ce:40:06:18:65";
BRIDGE1="vmbr0";IP1="172.3.255.24/28";GW="172.3.255.30"
# -----------
qm create ${VMID} \
-name ${HOSTNAME} -ostype l26 -bios ${BIOS} \
-sockets 1 -cores 4 -vcpus 4 -memory 12288 -vga qxl -onboot 1 \
-net0 virtio,bridge=${BRIDGE0},macaddr=${MACADDR} \
-net1 virtio,bridge=${BRIDGE1} \
-ipconfig0 ip=${IP0} \
-ipconfig1 ip=${IP1},gw=${GW} \
-sshkey ~/hpc.pub; qm start ${VMID}

# Remove
VMID=18065;qm stop ${VMID};qm destroy ${VMID};

# Access VM
ssh -i ~/hpc-key.pem -o StrictHostKeyChecking=no -o BatchMode=yes rocky@172.3.255.24

###########################
# 3.1) Authentication PAM #
###########################
su -

echo 'rocky:aamu02' | chpasswd


###########################
# 3.2) Authentication DEX #
###########################
sudo systemctl enable --now ondemand-dex

# user
sudo groupadd ood
sudo useradd -d /home/ood -g ood -k /etc/skel -m ood

# access
http://oondemand/

username: ood@localhoste 
password: password


################################
# 3.3) Authentication Keycloak #
################################
VMID=22023;HOSTNAME="keycloak";STORAGE="local-lvm";DISK="8";MEMORY="2048";
BRIDGE="vmbr0";IP="172.3.255.23/28";GW="172.3.255.30";
# -----------
#pveam list local
pct create ${VMID} \
-hostname ${HOSTNAME} \
local:vztmpl/alpine-3.16-default_20220622_amd64.tar.xz \
-cores 1 -memory ${MEMORY} -swap 0 \
-rootfs ${STORAGE}:${DISK} \
-net0 name=eth0,bridge=${BRIDGE},ip=${IP},gw=${GW} \
-unprivileged 1 \
-features nesting=1,keyctl=1 \
-onboot 1 \
-ssh-public-keys ~/key2.pub

pct start ${VMID}
# -----------
# Remove
VMID=22023;pct stop ${VMID};pct destroy ${VMID};


#####################
# Option 1) OpenJDK #
#####################
pct exec ${VMID} -- sh -c "apk add --no-cache openjdk11 bash"

pct exec ${VMID} -- sh
# ----------------------
rm keycloak-* -fR

VERSION_KEYCLOAK="16.1.1"
VERSION_KEYCLOAK="18.0.2"

wget -c https://github.com/keycloak/keycloak/releases/download/${VERSION_KEYCLOAK}/keycloak-${VERSION_KEYCLOAK}.zip

unzip keycloak-${VERSION_KEYCLOAK}.zip

ln -s /root/keycloak-${VERSION_KEYCLOAK}/bin/kc.sh /usr/bin/keycloak
# -----------
tee /etc/init.d/keycloak <<EoF
#!/sbin/openrc-run

export KEYCLOAK_ADMIN=admin
export KEYCLOAK_ADMIN_PASSWORD=admin

name="busybox keycloak"
command="/usr/bin/keycloak"
command_args="start-dev"
pidfile="/var/run/keycloak.pid"
command_background="yes"

depend() {
        need net
}
EoF
# -----------
chmod +x /etc/init.d/keycloak

rc-update add keycloak

service keycloak status





# Secret: 23d8RnBE9JU9h71a3RH9JJFuahxyJKJf


sudo sed -i '/auth:/s/#//' /etc/ood/config/ood_portal.yml
sudo sed -i '/AuthType/s/#//' /etc/ood/config/ood_portal.yml
sudo sed -i '/Require/s/#//' /etc/ood/config/ood_portal.yml

logout_redirect

oidc_uri: '/oidc'




#######################
# Option 2) Container #
#######################
#
docker run --rm --name keycloak \
-p 8080:8080 -p 8443:8443 \
-e KEYCLOAK_USER=admin \
-e KEYCLOAK_PASSWORD=admin \
quay.io/keycloak/keycloak:16.1.1


13.0.1

#pct exec ${VMID} -- sh -c "apk add --no-cache openssh curl && echo 'PermitRootLogin yes' >>/etc/ssh/ssh_config && rc-update add sshd && service sshd restart"
#
pct exec ${VMID} -- sh -c "apk add --no-cache docker && rc-update add docker && reboot"

#pct exec ${VMID} -- sh -c "docker run -d --name keycloak -p 8080:8080 -p 8443:8443 -e KEYCLOAK_ADMIN=admin -e KEYCLOAK_ADMIN_PASSWORD=admin quay.io/keycloak/keycloak:18.0.2 start-dev"

pct exec ${VMID} -- sh -c "docker run --rm --name Keycloak -p 8080:8080 -p 8443:8443 -e KEYCLOAK_USER=admin -e KEYCLOAK_PASSWORD=admin quay.io/keycloak/keycloak:16.1.1"

pct exec ${VMID} -- sh -c "docker rm -f keycloak"


# Access
http://keycloak:8080/
user: admin
pass: admin


# ---------------------------------
# ---------------------------------

https://keycloak:8443/
# -----------
Administration Console >
	Username: admin
	Password: admin

Master
	Add realm
		Name*: oondemand
		Create
		
	Realm Settings
	  Login:
	    Remember Me: ON
	    Login with email: OFF
	    Require SSL: none
	    Save
	    
	Clients
	  Create
	    Client ID: oondemand
	    Client Protocol: openid-connect
	    Save
	  Settings
	 		 Access Type: confidential
	     Direct Access Grants Enabled: OFF
	     Valid Redirect URIs:
	       http://ondemand
	       http://ondemand/oidc
	     Save
		
# ----------------------
# /etc/ood/config/ood_portal.yml
servername: oondemand

# Use OIDC authentication
auth:
  - "AuthType openid-connect"
  - "Require valid-user"

# Use OIDC logout
logout_redirect: "/oidc?logout=http%3A%2F%oondemand"

# Capture system user name from authenticated user name
user_map_cmd: "/opt/ood/ood_auth_map/bin/ood_auth_map.regex"

oidc_uri: "/oidc"
oidc_provider_metadata_url: "https://keycloak:8443/auth/realms/oondemand/.well-known/openid-configuration"
oidc_client_id: "oondemand"
oidc_client_secret: "cDtV8WYpoxtDJTsiWCFW6Kik9JzdXxeI"
oidc_remote_user_claim: "preferred_username"
#oidc_scope: "openid profile email groups"
oidc_session_inactivity_timeout: 28800
oidc_session_max_duration: 28800
oidc_state_max_number_of_cookies: "10 true"
oidc_settings:
  OIDCPassIDTokenAs: "serialized"
  OIDCPassRefreshToken: "On"
  OIDCPassClaimsAs: "environment"
  OIDCStripCookies: "mod_auth_openidc_session mod_auth_openidc_session_chunks mod_auth_openidc_session_0 mod_auth_openidc_session_1"





############################
# Config cluster (Overlay) #
############################
sudo mkdir -p /etc/ood/config/clusters.d

sudo tee /etc/ood/config/clusters.d/ixone.yml <<EoF
---
v2:
  metadata:
    title: "ixone Cluster"
  login:
    host: "ip-172-3-255-27"
  job:
    adapter: "slurm"
    cluster: "ixone"
    bin: "/usr/bin"
    conf: "/etc/slurm/slurm.conf"
EoF
# -----------




